/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lithiumbms;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import jssc.SerialPortList;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author jiris
 */
public class LithiumBMS extends javax.swing.JFrame {

    SerialPort port;
    final JFileChooser fileChooser;
    int packetCounter = 0;
    int nCells = 0;
    Timer dataTimer;
    TimerTask dataTask;

    /**
     * Creates new form LithiumBMS
     */
    public LithiumBMS() {
        this.fileChooser = new JFileChooser();
        this.dataTimer = new Timer();
        initComponents();
        //update ports
        UpdatePortsBtn.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        PortsComboBox = new javax.swing.JComboBox<>();
        UpdatePortsBtn = new javax.swing.JButton();
        ConnectBtn = new javax.swing.JButton();
        DisconnectBtn = new javax.swing.JButton();
        ReceivedPacketsStr = new javax.swing.JLabel();
        ReceivedPacketsValue = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        LoadConfFromDev = new javax.swing.JButton();
        SaveConfToDev = new javax.swing.JButton();
        SaveConfToFile = new javax.swing.JButton();
        LoadConfFromFile = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        CurrentCutoffText = new javax.swing.JTextField();
        TempCutoffText = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        CellVoltSensingText = new javax.swing.JTextField();
        LVoltageCutoffText = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        BalancerOnVoltText = new javax.swing.JTextField();
        ShuntValueText = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        CurrentSensingText = new javax.swing.JTextField();
        LedIndicationCheck = new javax.swing.JCheckBox();
        ResetSwFuseCheck = new javax.swing.JCheckBox();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(120, 0), new java.awt.Dimension(120, 0), new java.awt.Dimension(120, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 32767));
        jLabel48 = new javax.swing.JLabel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(70, 0), new java.awt.Dimension(70, 0), new java.awt.Dimension(70, 32767));
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        HVoltageCutoffText = new javax.swing.JTextField();
        BalancerOffVoltText = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        EnableBalancerCheck = new javax.swing.JCheckBox();
        AutoResetSwFuseCheck = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        ReadPackVoltText = new javax.swing.JLabel();
        ReadPackCurrText = new javax.swing.JLabel();
        ReadPackPowerText = new javax.swing.JLabel();
        ReadPackTempText = new javax.swing.JLabel();
        ReadHwFuseStatText = new javax.swing.JLabel();
        ReadPackNumCellsText = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        ReadCell1Volt = new javax.swing.JLabel();
        ReadCell2Volt = new javax.swing.JLabel();
        ReadCell3Volt = new javax.swing.JLabel();
        ReadCell4Volt = new javax.swing.JLabel();
        ReadCell5Volt = new javax.swing.JLabel();
        ReadCell6Volt = new javax.swing.JLabel();
        VoltageCell1Prog = new javax.swing.JProgressBar();
        VoltageCell2Prog = new javax.swing.JProgressBar();
        VoltageCell3Prog = new javax.swing.JProgressBar();
        VoltageCell4Prog = new javax.swing.JProgressBar();
        VoltageCell5Prog = new javax.swing.JProgressBar();
        VoltageCell6Prog = new javax.swing.JProgressBar();
        ResetSwFuseBtn = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        ReadSwFuseStatText = new javax.swing.JLabel();
        ReadBal1En = new javax.swing.JLabel();
        ReadBal2En = new javax.swing.JLabel();
        ReadBal3En = new javax.swing.JLabel();
        ReadBal4En = new javax.swing.JLabel();
        ReadBal5En = new javax.swing.JLabel();
        ReadBal6En = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        UpdateRateCB = new javax.swing.JComboBox<>();
        AskForDataBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        boardStatusText = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        PackChargeLevel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lithium-BMS Control Panel v1.4");
        setName(""); // NOI18N
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CONNECTION SETTINGS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        jPanel2.setToolTipText("");

        PortsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        UpdatePortsBtn.setText("Update");
        UpdatePortsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatePortsBtnActionPerformed(evt);
            }
        });

        ConnectBtn.setText("Connect");
        ConnectBtn.setEnabled(false);
        ConnectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectBtnActionPerformed(evt);
            }
        });

        DisconnectBtn.setText("Disconnect");
        DisconnectBtn.setEnabled(false);
        DisconnectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisconnectBtnActionPerformed(evt);
            }
        });

        ReceivedPacketsStr.setText("Received packets: ");

        ReceivedPacketsValue.setText("0");

        jLabel1.setText("Port:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PortsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UpdatePortsBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ConnectBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DisconnectBtn)
                .addGap(27, 27, 27)
                .addComponent(ReceivedPacketsStr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ReceivedPacketsValue)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(PortsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdatePortsBtn)
                    .addComponent(ConnectBtn)
                    .addComponent(DisconnectBtn)
                    .addComponent(ReceivedPacketsStr)
                    .addComponent(ReceivedPacketsValue))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CONFIGURATION", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        LoadConfFromDev.setText("Load from device");
        LoadConfFromDev.setEnabled(false);
        LoadConfFromDev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadConfFromDevActionPerformed(evt);
            }
        });

        SaveConfToDev.setText("Save to device");
        SaveConfToDev.setEnabled(false);
        SaveConfToDev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveConfToDevActionPerformed(evt);
            }
        });

        SaveConfToFile.setText("Save to file");
        SaveConfToFile.setEnabled(false);
        SaveConfToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveConfToFileActionPerformed(evt);
            }
        });

        LoadConfFromFile.setText("Load from file");
        LoadConfFromFile.setEnabled(false);
        LoadConfFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadConfFromFileActionPerformed(evt);
            }
        });

        jLabel2.setText("Current cutoff");

        CurrentCutoffText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        CurrentCutoffText.setText("16.0");

        TempCutoffText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TempCutoffText.setText("40.0");

        jLabel33.setText("Temperature cutoff");

        jLabel34.setText("Shunt resistor value");

        CellVoltSensingText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        CellVoltSensingText.setText("5.0");

        LVoltageCutoffText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        LVoltageCutoffText.setText("3.5");
        LVoltageCutoffText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LVoltageCutoffTextActionPerformed(evt);
            }
        });

        jLabel35.setText("Lower voltage cutoff per cell");

        jLabel36.setText("Balancer turn on voltage delta");

        BalancerOnVoltText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        BalancerOnVoltText.setText("0.25");

        ShuntValueText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ShuntValueText.setText("0.01");

        jLabel37.setText("Cell voltage sensing period");

        jLabel40.setText("Current sensing period");

        CurrentSensingText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        CurrentSensingText.setText("0.1");

        LedIndicationCheck.setSelected(true);
        LedIndicationCheck.setText("LED indication");
        LedIndicationCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LedIndicationCheckActionPerformed(evt);
            }
        });

        ResetSwFuseCheck.setSelected(true);
        ResetSwFuseCheck.setText("Reset SW fuse with button");

        jLabel41.setText("A");

        jLabel42.setText("°C");

        jLabel44.setText("V");

        jLabel45.setText("R");

        jLabel46.setText("sec");

        jLabel47.setText("sec");

        jLabel48.setText("V");

        jLabel38.setText("Higher voltage cutoff per cell");

        jLabel39.setText("Balancer turn off voltage delta");

        HVoltageCutoffText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        HVoltageCutoffText.setText("4.25");

        BalancerOffVoltText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        BalancerOffVoltText.setText("0.1");

        jLabel43.setText("V");

        jLabel49.setText("V");

        EnableBalancerCheck.setSelected(true);
        EnableBalancerCheck.setText("Balancer");

        AutoResetSwFuseCheck.setSelected(true);
        AutoResetSwFuseCheck.setText("Auto SW fuse reset");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel36)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel35)
                        .addGap(89, 89, 89)
                        .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel33)
                    .addComponent(jLabel34)
                    .addComponent(jLabel37)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(ResetSwFuseCheck))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(AutoResetSwFuseCheck)
                                .addGap(18, 18, 18)
                                .addComponent(LedIndicationCheck)
                                .addGap(18, 18, 18)
                                .addComponent(EnableBalancerCheck))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ShuntValueText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel45))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(BalancerOnVoltText, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LVoltageCutoffText, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TempCutoffText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                                    .addComponent(CurrentCutoffText, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel42)
                                    .addComponent(jLabel41)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel44))
                                        .addGap(7, 7, 7)
                                        .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel38)
                                            .addComponent(jLabel39))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(HVoltageCutoffText, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                                            .addComponent(BalancerOffVoltText))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel43)
                                            .addComponent(jLabel49)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(CellVoltSensingText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel46))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(CurrentSensingText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel47))))
                    .addComponent(jLabel40)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(LoadConfFromFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveConfToFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LoadConfFromDev)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveConfToDev)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(CurrentCutoffText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel33)
                            .addComponent(TempCutoffText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel42))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel35)
                            .addComponent(LVoltageCutoffText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel44))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel36)
                            .addComponent(BalancerOnVoltText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel48)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel38)
                                    .addComponent(HVoltageCutoffText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel43))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(BalancerOffVoltText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel49)
                                    .addComponent(jLabel39))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel34)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ShuntValueText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel45)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel37)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CellVoltSensingText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel46)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel40)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CurrentSensingText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel47)))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ResetSwFuseCheck)
                    .addComponent(LedIndicationCheck)
                    .addComponent(EnableBalancerCheck)
                    .addComponent(AutoResetSwFuseCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoadConfFromFile)
                    .addComponent(SaveConfToFile)
                    .addComponent(LoadConfFromDev)
                    .addComponent(SaveConfToDev))
                .addGap(18, 18, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CURRENT STATUS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("PACK");

        jLabel6.setText("Voltage");

        jLabel7.setText("Current");

        jLabel8.setText("Power");

        jLabel9.setText("Temperature");

        jLabel10.setText("HW Fuse status");

        jLabel11.setText("Cells detected");

        ReadPackVoltText.setText("0.00V");

        ReadPackCurrText.setText("0.00A");

        ReadPackPowerText.setText("0.00W");

        ReadPackTempText.setText("20.0°C");

        ReadHwFuseStatText.setText("OK");

        ReadPackNumCellsText.setText("0");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel19.setText("CELLS");

        jLabel18.setText("1:");

        jLabel20.setText("2:");

        jLabel21.setText("3:");

        jLabel22.setText("4:");

        jLabel23.setText("5:");

        jLabel24.setText("6:");

        ReadCell1Volt.setText("0.00V");

        ReadCell2Volt.setText("0.00V");

        ReadCell3Volt.setText("0.00V");

        ReadCell4Volt.setText("0.00V");

        ReadCell5Volt.setText("0.00V");

        ReadCell6Volt.setText("0.00V");

        VoltageCell1Prog.setMaximum(4300);

        VoltageCell2Prog.setMaximum(4300);

        VoltageCell3Prog.setMaximum(4300);

        VoltageCell4Prog.setMaximum(4300);
        VoltageCell4Prog.setToolTipText("");

        VoltageCell5Prog.setMaximum(4300);

        VoltageCell6Prog.setMaximum(4300);

        ResetSwFuseBtn.setText("Reset sw fuse");
        ResetSwFuseBtn.setEnabled(false);
        ResetSwFuseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetSwFuseBtnActionPerformed(evt);
            }
        });

        jLabel31.setText("SW Fuse status");

        ReadSwFuseStatText.setText("OK");

        ReadBal1En.setText("OFF");

        ReadBal2En.setText("OFF");

        ReadBal3En.setText("OFF");

        ReadBal4En.setText("OFF");

        ReadBal5En.setText("OFF");

        ReadBal6En.setText("OFF");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setText("BALANCER");

        jLabel4.setText("Update rate");

        UpdateRateCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1 sec", "5 sec", "10 sec", "20 sec", "30 sec", "Manually" }));
        UpdateRateCB.setSelectedIndex(2);
        UpdateRateCB.setEnabled(false);
        UpdateRateCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateRateCBActionPerformed(evt);
            }
        });

        AskForDataBtn.setText("Now!");
        AskForDataBtn.setEnabled(false);
        AskForDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AskForDataBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Board status: ");

        boardStatusText.setText("OUTPUT OFF");

        jLabel12.setText("Charge level");

        PackChargeLevel.setText("0.0%");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ReadHwFuseStatText)
                            .addComponent(ReadPackTempText)
                            .addComponent(ReadPackPowerText)
                            .addComponent(ReadPackCurrText)
                            .addComponent(ReadPackVoltText)
                            .addComponent(ReadPackNumCellsText)
                            .addComponent(ReadSwFuseStatText)))
                    .addComponent(jLabel31)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(51, 51, 51)
                        .addComponent(PackChargeLevel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ReadBal1En)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                                .addComponent(ReadCell1Volt))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ReadBal4En)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ReadCell4Volt))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ReadBal5En)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ReadCell5Volt))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ReadBal6En)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ReadCell6Volt))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ReadBal2En)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ReadCell2Volt))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ReadBal3En)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ReadCell3Volt)))
                        .addGap(237, 237, 237))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(UpdateRateCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AskForDataBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ResetSwFuseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(133, 133, 133)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(VoltageCell6Prog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                                            .addComponent(VoltageCell5Prog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(VoltageCell4Prog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(VoltageCell3Prog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(VoltageCell2Prog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(VoltageCell1Prog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(jLabel19)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(boardStatusText)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel19)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel6)
                                                .addComponent(ReadPackVoltText)
                                                .addComponent(jLabel18)
                                                .addComponent(ReadCell1Volt)
                                                .addComponent(ReadBal1En))
                                            .addComponent(VoltageCell1Prog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel7)
                                            .addComponent(ReadPackCurrText)
                                            .addComponent(jLabel20)
                                            .addComponent(ReadCell2Volt)
                                            .addComponent(ReadBal2En)))
                                    .addComponent(VoltageCell2Prog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(ReadPackPowerText)
                                    .addComponent(jLabel21)
                                    .addComponent(ReadCell3Volt)
                                    .addComponent(ReadBal3En)))
                            .addComponent(VoltageCell3Prog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(ReadPackTempText)
                                .addComponent(jLabel22)
                                .addComponent(ReadCell4Volt)
                                .addComponent(ReadBal4En))
                            .addComponent(VoltageCell4Prog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel23)
                                .addComponent(jLabel11)
                                .addComponent(ReadBal5En)
                                .addComponent(ReadCell5Volt))
                            .addComponent(ReadPackNumCellsText)))
                    .addComponent(VoltageCell5Prog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ReadCell6Volt)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel24)
                        .addComponent(ReadBal6En))
                    .addComponent(VoltageCell6Prog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(ReadHwFuseStatText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ReadSwFuseStatText)
                        .addComponent(jLabel5)
                        .addComponent(boardStatusText)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ResetSwFuseBtn)
                        .addComponent(jLabel4)
                        .addComponent(UpdateRateCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AskForDataBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(PackChargeLevel))
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LedIndicationCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LedIndicationCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LedIndicationCheckActionPerformed

    private void LVoltageCutoffTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LVoltageCutoffTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LVoltageCutoffTextActionPerformed

    private void UpdatePortsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatePortsBtnActionPerformed
        PortsComboBox.removeAllItems();
        String[] portNames = SerialPortList.getPortNames();
        if (portNames.length > 0) {
            for (String portName : portNames) {
                PortsComboBox.addItem(portName);
            }
            ConnectBtn.setEnabled(true);
        } else {
            PortsComboBox.addItem("-----");
            ConnectBtn.setEnabled(false);
        }
    }//GEN-LAST:event_UpdatePortsBtnActionPerformed

    private void ConnectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectBtnActionPerformed
        String portName = PortsComboBox.getSelectedItem().toString();
        try {
            port = new SerialPort(portName);
            port.openPort();
            port.setParams(115200, 8, 1, 0);
            setTitle("Lithium-BMS Control Panel v1.4 - Connected to " + PortsComboBox.getSelectedItem().toString());
            ConnectBtn.setEnabled(false);
            UpdatePortsBtn.setEnabled(false);
            PortsComboBox.setEnabled(false);
            DisconnectBtn.setEnabled(true);
            LoadConfFromDev.setEnabled(true);
            SaveConfToDev.setEnabled(true);
            ResetSwFuseBtn.setEnabled(true);
            SaveConfToFile.setEnabled(true);
            LoadConfFromFile.setEnabled(true);
            UpdateRateCB.setEnabled(true);
            AskForDataBtn.setEnabled(true);
        } catch (SerialPortException ex) {
            JOptionPane.showMessageDialog(null, "Cannot connect to specified port,\nplease if it is not in use", "Connection Error", JOptionPane.ERROR_MESSAGE);
        }

        try {
            port.addEventListener(new SerialPortReader());
        } catch (SerialPortException ex) {

        }

        //select data update rate
        int i = UpdateRateCB.getSelectedIndex();
        dataTask = new DataTimerTask();
        switch (i) {
            case 0:
                //1s
                dataTimer.scheduleAtFixedRate(dataTask, 1000, 1000);
                break;
            case 1:
                //5s
                dataTimer.scheduleAtFixedRate(dataTask, 5000, 5000);
                break;
            case 2:
                //10s
                dataTimer.scheduleAtFixedRate(dataTask, 10000, 10000);
                break;
            case 3:
                //20s
                dataTimer.scheduleAtFixedRate(dataTask, 20000, 20000);
                break;
            case 4:
                //30s
                dataTimer.scheduleAtFixedRate(dataTask, 30000, 30000);
                break;
            case 5:
                //manually
                break;
            default:
                break;
        }
    }//GEN-LAST:event_ConnectBtnActionPerformed

    private void DisconnectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisconnectBtnActionPerformed
        dataTask.cancel();
        try {
            port.closePort();
            setTitle("Lithium-BMS Control Panel v1.4");
            ConnectBtn.setEnabled(true);
            UpdatePortsBtn.setEnabled(true);
            PortsComboBox.setEnabled(true);
            DisconnectBtn.setEnabled(false);
            LoadConfFromDev.setEnabled(false);
            SaveConfToDev.setEnabled(false);
            ResetSwFuseBtn.setEnabled(false);
            SaveConfToFile.setEnabled(false);
            LoadConfFromFile.setEnabled(false);
            UpdateRateCB.setEnabled(false);
            AskForDataBtn.setEnabled(false);
            UpdatePortsBtn.doClick();
        } catch (SerialPortException ex) {
            JOptionPane.showMessageDialog(null, "Cannot close the port,\nplease check if it is still connected", "Connection Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DisconnectBtnActionPerformed

    private void SaveConfToDevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveConfToDevActionPerformed
        try {
            port.writeString("AT+ICUTOFF=" + CurrentCutoffText.getText() + "\r\n");
            port.writeString("AT+TCUTOFF=" + TempCutoffText.getText() + "\r\n");
            port.writeString("AT+VCUTOFF=" + LVoltageCutoffText.getText() + "," + HVoltageCutoffText.getText() + "\r\n");
            port.writeString("AT+VBAL=" + BalancerOnVoltText.getText() + "," + BalancerOffVoltText.getText() + "\r\n");
            port.writeString("AT+RSENSE=" + ShuntValueText.getText() + "\r\n");
            port.writeString("AT+VSTIME=" + CellVoltSensingText.getText() + "\r\n");
            port.writeString("AT+ISTIME=" + CurrentSensingText.getText() + "\r\n");

            if (AutoResetSwFuseCheck.isSelected()) {
                port.writeString("AT+SWFAUTORES=1\r\n");
            } else {
                port.writeString("AT+SWFAUTORES=0\r\n");
            }

            if (ResetSwFuseCheck.isSelected()) {
                port.writeString("AT+BTN=1\r\n");
            } else {
                port.writeString("AT+BTN=0\r\n");
            }

            if (LedIndicationCheck.isSelected()) {
                port.writeString("AT+LED=1\r\n");
            } else {
                port.writeString("AT+LED=0\r\n");
            }

            if (EnableBalancerCheck.isSelected()) {
                port.writeString("AT+EBAL=1\r\n");
            } else {
                port.writeString("AT+EBAL=0\r\n");
            }
            
            port.writeString("AT+SAVE\r\n");
        } catch (SerialPortException ex) {
            Logger.getLogger(LithiumBMS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SaveConfToDevActionPerformed

    private void LoadConfFromDevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadConfFromDevActionPerformed
        try {
            port.writeString("AT+ICUTOFF?\r\n");
            port.writeString("AT+TCUTOFF?\r\n");
            port.writeString("AT+VCUTOFF?\r\n");
            port.writeString("AT+VBAL?\r\n");
            port.writeString("AT+RSENSE?\r\n");
            port.writeString("AT+VSTIME?\r\n");
            port.writeString("AT+ISTIME?\r\n");
            port.writeString("AT+SWFAUTORES?\r\n");
            port.writeString("AT+BTN?\r\n");
            port.writeString("AT+LED?\r\n");
            port.writeString("AT+EBAL?\r\n");
        } catch (SerialPortException ex) {
            Logger.getLogger(LithiumBMS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_LoadConfFromDevActionPerformed

    private void SaveConfToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveConfToFileActionPerformed
        FileFilter filter = new FileNameExtensionFilter("Configuration file", "cfg");
        fileChooser.setFileFilter(filter);
        int res = fileChooser.showSaveDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            PrintWriter out;
            try {
                String filePath = fileChooser.getSelectedFile().getAbsolutePath();
                if (!filePath.contains(".cfg")) {
                    filePath += ".cfg";
                }
                out = new PrintWriter(filePath);
                out.println("+ICUTOFF:" + CurrentCutoffText.getText());
                out.println("+TCUTOFF:" + TempCutoffText.getText());
                out.println("+VCUTOFF:" + LVoltageCutoffText.getText() + "," + HVoltageCutoffText.getText());
                out.println("+VBAL:" + BalancerOnVoltText.getText() + "," + BalancerOffVoltText.getText());
                out.println("+RSENSE:" + ShuntValueText.getText());
                out.println("+VSTIME:" + CellVoltSensingText.getText());
                out.println("+ISTIME:" + CurrentSensingText.getText());

                if (AutoResetSwFuseCheck.isSelected()) {
                    out.println("+SWFAUTORES:1");
                } else {
                    out.println("+SWFAUTORES:0");
                }

                if (ResetSwFuseCheck.isSelected()) {
                    out.println("+BTN:1");
                } else {
                    out.println("+BTN:0");
                }

                if (LedIndicationCheck.isSelected()) {
                    out.println("+LED:1");
                } else {
                    out.println("+LED:0");
                }

                if (EnableBalancerCheck.isSelected()) {
                    out.println("+EBAL:1");
                } else {
                    out.println("+EBAL:0");
                }
                out.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(LithiumBMS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SaveConfToFileActionPerformed

    private void LoadConfFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadConfFromFileActionPerformed
        FileFilter filter = new FileNameExtensionFilter("Configuration file", "cfg");
        fileChooser.setFileFilter(filter);
        int res = fileChooser.showOpenDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            try {
                BufferedReader reader = new BufferedReader(new FileReader(fileChooser.getSelectedFile().getAbsolutePath()));
                String line;
                while ((line = reader.readLine()) != null) {
                    ParseData(line);
                }
                reader.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(LithiumBMS.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(LithiumBMS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_LoadConfFromFileActionPerformed

    private void ResetSwFuseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetSwFuseBtnActionPerformed
        try {
            port.writeString("AT+SWFRES\r\n");
        } catch (SerialPortException ex) {
            Logger.getLogger(LithiumBMS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ResetSwFuseBtnActionPerformed

    private void AskForDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AskForDataBtnActionPerformed
        try {
            port.writeString("AT+VPACK?\r\n");
            port.writeString("AT+I?\r\n");
            port.writeString("AT+P?\r\n");
            port.writeString("AT+T?\r\n");
            port.writeString("AT+NCELLS?\r\n");
            port.writeString("AT+HWFUSE?\r\n");
            port.writeString("AT+SWFUSE?\r\n");
            port.writeString("AT+BAL?\r\n");
            port.writeString("AT+VCELLS?\r\n");
            port.writeString("AT+STATUS?\r\n");
            port.writeString("AT+PERCENT?\r\n");
        } catch (SerialPortException ex) {
            Logger.getLogger(LithiumBMS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AskForDataBtnActionPerformed

    private void UpdateRateCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateRateCBActionPerformed
        int i = UpdateRateCB.getSelectedIndex();
        dataTask.cancel();
        dataTask = new DataTimerTask();
        switch (i) {
            case 0:
                //1s
                dataTimer.scheduleAtFixedRate(dataTask, 1000, 1000);
                break;
            case 1:
                //5s
                dataTimer.scheduleAtFixedRate(dataTask, 5000, 5000);
                break;
            case 2:
                //10s
                dataTimer.scheduleAtFixedRate(dataTask, 10000, 10000);
                break;
            case 3:
                //20s
                dataTimer.scheduleAtFixedRate(dataTask, 20000, 20000);
                break;
            case 4:
                //30s
                dataTimer.scheduleAtFixedRate(dataTask, 30000, 30000);
                break;
            case 5:
                //manually
                break;
            default:
                break;
        }
    }//GEN-LAST:event_UpdateRateCBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LithiumBMS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LithiumBMS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LithiumBMS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LithiumBMS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LithiumBMS().setVisible(true);
            }
        });
    }

    private void ParseData(String line) {
        //config
        if (line.contains("+ICUTOFF:")) {
            String[] parts = line.split(":|,");
            CurrentCutoffText.setText(parts[1]);
        } else if (line.contains("+TCUTOFF:")) {
            String[] parts = line.split(":|,");
            TempCutoffText.setText(parts[1]);
        } else if (line.contains("+VCUTOFF:")) {
            String[] parts = line.split(":|,");
            LVoltageCutoffText.setText(parts[1]);
            HVoltageCutoffText.setText(parts[2]);
        } else if (line.contains("+VBAL:")) {
            String[] parts = line.split(":|,");
            BalancerOnVoltText.setText(parts[1]);
            BalancerOffVoltText.setText(parts[2]);
        } else if (line.contains("+RSENSE:")) {
            String[] parts = line.split(":|,");
            ShuntValueText.setText(parts[1]);
        } else if (line.contains("+VSTIME:")) {
            String[] parts = line.split(":|,");
            CellVoltSensingText.setText(parts[1]);
        } else if (line.contains("+ISTIME:")) {
            String[] parts = line.split(":|,");
            CurrentSensingText.setText(parts[1]);
        } else if (line.contains("+SWFAUTORES:")) {
            String[] parts = line.split(":|,");
            if (parts[1].contains("1")) {
                AutoResetSwFuseCheck.setSelected(true);
            } else {
                AutoResetSwFuseCheck.setSelected(false);
            }
        } else if (line.contains("+BTN:")) {
            String[] parts = line.split(":|,");
            if (parts[1].contains("1")) {
                ResetSwFuseCheck.setSelected(true);
            } else {
                ResetSwFuseCheck.setSelected(false);
            }
        } else if (line.contains("+LED:")) {
            String[] parts = line.split(":|,");
            if (parts[1].contains("1")) {
                LedIndicationCheck.setSelected(true);
            } else {
                LedIndicationCheck.setSelected(false);
            }
        } else if (line.contains("+EBAL:")) {
            String[] parts = line.split(":|,");
            if (parts[1].contains("1")) {
                EnableBalancerCheck.setSelected(true);
            } else {
                EnableBalancerCheck.setSelected(false);
            }
        } //read data
        else if (line.contains("+VPACK:")) {
            String[] parts = line.split(":|,");
            float vPack = Float.valueOf(parts[1]);
            DecimalFormat df = new DecimalFormat();
            df.setMaximumFractionDigits(2);
            df.setMinimumFractionDigits(2);
            ReadPackVoltText.setText(df.format(vPack) + "V");
        } else if (line.contains("+I:")) {
            String[] parts = line.split(":|,");
            float current = Float.valueOf(parts[1]);
            DecimalFormat df = new DecimalFormat();
            df.setMaximumFractionDigits(2);
            df.setMinimumFractionDigits(2);
            ReadPackCurrText.setText(df.format(current) + "A");
        } else if (line.contains("+P:")) {
            String[] parts = line.split(":|,");
            float power = Float.valueOf(parts[1]);
            DecimalFormat df = new DecimalFormat();
            df.setMaximumFractionDigits(2);
            df.setMinimumFractionDigits(2);
            ReadPackPowerText.setText(df.format(power) + "W");
        } else if (line.contains("+T:")) {
            String[] parts = line.split(":|,");
            float temp = Float.valueOf(parts[1]);
            DecimalFormat df = new DecimalFormat();
            df.setMaximumFractionDigits(1);
            df.setMinimumFractionDigits(1);
            ReadPackTempText.setText(df.format(temp) + "°C");
        } else if (line.contains("+NCELLS:")) {
            String[] parts = line.split(":|,");
            nCells = Integer.valueOf(parts[1]);
            ReadPackNumCellsText.setText(Integer.toString(nCells));
        } else if (line.contains("+HWFUSE:")) {
            String[] parts = line.split(":|,");
            if (parts[1].contains("0")) {
                ReadHwFuseStatText.setText("OK");
            } else {
                ReadHwFuseStatText.setText("TRIG");
            }
        } else if (line.contains("+SWFUSE:")) {
            String[] parts = line.split(":|,");
            if (parts[1].contains("0")) {
                ReadSwFuseStatText.setText("OK");
            } else if (parts[1].contains("1")) {
                ReadSwFuseStatText.setText("OVER_I");
            } else if (parts[1].contains("2")) {
                ReadSwFuseStatText.setText("UNDER_V");
            } else if (parts[1].contains("3")) {
                ReadSwFuseStatText.setText("OVER_V");
            } else if (parts[1].contains("4")) {
                ReadSwFuseStatText.setText("OVER_T");
            } else {
                ReadSwFuseStatText.setText("ERR");
            }
        } else if (line.contains("+VCELLS:")) {
            String[] parts = line.split(":|,");
            DecimalFormat df = new DecimalFormat();
            df.setMaximumFractionDigits(2);
            df.setMinimumFractionDigits(2);
            float cellVoltage;

            if (nCells >= 1) {
                cellVoltage = Float.valueOf(parts[1]);
                ReadCell1Volt.setText(df.format(cellVoltage) + "V");
                VoltageCell1Prog.setValue((int) (1000 * cellVoltage));
            } else {
                ReadCell1Volt.setText("N/A");
                VoltageCell1Prog.setValue(0);
            }

            if (nCells >= 2) {
                cellVoltage = Float.valueOf(parts[2]);
                ReadCell2Volt.setText(df.format(cellVoltage) + "V");
                VoltageCell2Prog.setValue((int) (1000 * cellVoltage));
            } else {
                ReadCell2Volt.setText("N/A");
                VoltageCell2Prog.setValue(0);
            }

            if (nCells >= 3) {
                cellVoltage = Float.valueOf(parts[3]);
                ReadCell3Volt.setText(df.format(cellVoltage) + "V");
                VoltageCell3Prog.setValue((int) (1000 * cellVoltage));
            } else {
                ReadCell3Volt.setText("N/A");
                VoltageCell3Prog.setValue(0);
            }

            if (nCells >= 4) {
                cellVoltage = Float.valueOf(parts[4]);
                ReadCell4Volt.setText(df.format(cellVoltage) + "V");
                VoltageCell4Prog.setValue((int) (1000 * cellVoltage));
            } else {
                ReadCell4Volt.setText("N/A");
                VoltageCell4Prog.setValue(0);
            }

            if (nCells >= 5) {
                cellVoltage = Float.valueOf(parts[5]);
                ReadCell5Volt.setText(df.format(cellVoltage) + "V");
                VoltageCell5Prog.setValue((int) (1000 * cellVoltage));
            } else {
                ReadCell5Volt.setText("N/A");
                VoltageCell5Prog.setValue(0);
            }

            if (nCells >= 6) {
                cellVoltage = Float.valueOf(parts[6]);
                ReadCell6Volt.setText(df.format(cellVoltage) + "V");
                VoltageCell6Prog.setValue((int) (1000 * cellVoltage));
            } else {
                ReadCell6Volt.setText("N/A");
                VoltageCell6Prog.setValue(0);
            }

        } else if (line.contains("+BAL:")) {
            String[] parts = line.split(":|,");
            if (parts[1].contains("1")) {
                ReadBal1En.setText("ON");
            } else {
                ReadBal1En.setText("OFF");
            }

            if (parts[2].contains("1")) {
                ReadBal2En.setText("ON");
            } else {
                ReadBal2En.setText("OFF");
            }

            if (parts[3].contains("1")) {
                ReadBal3En.setText("ON");
            } else {
                ReadBal3En.setText("OFF");
            }

            if (parts[4].contains("1")) {
                ReadBal4En.setText("ON");
            } else {
                ReadBal4En.setText("OFF");
            }

            if (parts[5].contains("1")) {
                ReadBal5En.setText("ON");
            } else {
                ReadBal5En.setText("OFF");
            }

            if (parts[6].contains("1")) {
                ReadBal6En.setText("ON");
            } else {
                ReadBal6En.setText("OFF");
            }
        } else if (line.contains("+STATUS:")) {
            String[] parts = line.split(":|,");
            if (parts[1].contains("0")) boardStatusText.setText("OUTPUT OFF");
            else if (parts[1].contains("1")) boardStatusText.setText("DISCHARGING");
            else if (parts[1].contains("2")) boardStatusText.setText("CHARGING");
            else if (parts[1].contains("3")) boardStatusText.setText("CHARGING/BALANCING");
            else if (parts[1].contains("4")) boardStatusText.setText("CHARGING FINISHED");
            else if (parts[1].contains("5")) boardStatusText.setText("CAN NOT CHARGE - VOLTAGE TOO LOW");
            else if (parts[1].contains("6")) boardStatusText.setText("CAN NOT CHARGE - VOLTAGE TOO HIGH");
        } else if (line.contains("+PERCENT:")) {
            String[] parts = line.split(":|,");
            float temp = Float.valueOf(parts[1]);
            DecimalFormat df = new DecimalFormat();
            df.setMaximumFractionDigits(1);
            df.setMinimumFractionDigits(1);
            PackChargeLevel.setText(df.format(temp) + "%");
        } else if (line.contains("OK")) {
            ;
        } else if (line.contains("ERROR")) {
            JOptionPane.showMessageDialog(null, "Error received!", "Board error", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Unknown data read!\n"+line, "Data error", JOptionPane.ERROR_MESSAGE);
        }
    }

    class DataTimerTask extends TimerTask {

        @Override
        public void run() {
            AskForDataBtn.doClick();
        }
    }

    class SerialPortReader implements SerialPortEventListener {

        String readData = "";

        @Override
        public void serialEvent(SerialPortEvent event) {
            //Object type SerialPortEvent carries information about which event occurred and a value.
            //For example, if the data came a method event.getEventValue() returns us the number of bytes in the input buffer.
            if (event.isRXCHAR()) {
                try {
                    while (port.getInputBufferBytesCount() > 0) {
                        String s = port.readString(1);
                        if (!s.equals("\r") && !s.equals("\n")) {
                            readData += s;
                        }
                        if (s.equals("\n")) {
                            //complete message
                            packetCounter += 1;
                            ReceivedPacketsValue.setText(Integer.toString(packetCounter));
                            ParseData(readData);
                            readData = "";
                        } else if (readData.length() > 64) {
                            readData = "";
                        }
                    }
                } catch (SerialPortException ex) {
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AskForDataBtn;
    private javax.swing.JCheckBox AutoResetSwFuseCheck;
    private javax.swing.JTextField BalancerOffVoltText;
    private javax.swing.JTextField BalancerOnVoltText;
    private javax.swing.JTextField CellVoltSensingText;
    private javax.swing.JButton ConnectBtn;
    private javax.swing.JTextField CurrentCutoffText;
    private javax.swing.JTextField CurrentSensingText;
    private javax.swing.JButton DisconnectBtn;
    private javax.swing.JCheckBox EnableBalancerCheck;
    private javax.swing.JTextField HVoltageCutoffText;
    private javax.swing.JTextField LVoltageCutoffText;
    private javax.swing.JCheckBox LedIndicationCheck;
    private javax.swing.JButton LoadConfFromDev;
    private javax.swing.JButton LoadConfFromFile;
    private javax.swing.JLabel PackChargeLevel;
    private javax.swing.JComboBox<String> PortsComboBox;
    private javax.swing.JLabel ReadBal1En;
    private javax.swing.JLabel ReadBal2En;
    private javax.swing.JLabel ReadBal3En;
    private javax.swing.JLabel ReadBal4En;
    private javax.swing.JLabel ReadBal5En;
    private javax.swing.JLabel ReadBal6En;
    private javax.swing.JLabel ReadCell1Volt;
    private javax.swing.JLabel ReadCell2Volt;
    private javax.swing.JLabel ReadCell3Volt;
    private javax.swing.JLabel ReadCell4Volt;
    private javax.swing.JLabel ReadCell5Volt;
    private javax.swing.JLabel ReadCell6Volt;
    private javax.swing.JLabel ReadHwFuseStatText;
    private javax.swing.JLabel ReadPackCurrText;
    private javax.swing.JLabel ReadPackNumCellsText;
    private javax.swing.JLabel ReadPackPowerText;
    private javax.swing.JLabel ReadPackTempText;
    private javax.swing.JLabel ReadPackVoltText;
    private javax.swing.JLabel ReadSwFuseStatText;
    private javax.swing.JLabel ReceivedPacketsStr;
    private javax.swing.JLabel ReceivedPacketsValue;
    private javax.swing.JButton ResetSwFuseBtn;
    private javax.swing.JCheckBox ResetSwFuseCheck;
    private javax.swing.JButton SaveConfToDev;
    private javax.swing.JButton SaveConfToFile;
    private javax.swing.JTextField ShuntValueText;
    private javax.swing.JTextField TempCutoffText;
    private javax.swing.JButton UpdatePortsBtn;
    private javax.swing.JComboBox<String> UpdateRateCB;
    private javax.swing.JProgressBar VoltageCell1Prog;
    private javax.swing.JProgressBar VoltageCell2Prog;
    private javax.swing.JProgressBar VoltageCell3Prog;
    private javax.swing.JProgressBar VoltageCell4Prog;
    private javax.swing.JProgressBar VoltageCell5Prog;
    private javax.swing.JProgressBar VoltageCell6Prog;
    private javax.swing.JLabel boardStatusText;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
